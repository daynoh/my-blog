{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from '@contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\nimport GithubSlugger from 'github-slugger'\n\nconst Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: '**/**/*.mdx',\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n     publishedAt: {\n      type: 'date',\n      required: true\n    },\n     updatedAt: {\n      type: 'date',\n      required: true\n    },\n    description:{\n      type: 'string',\n      required: true\n    },\n    image: {\n      type: 'image',\n    },\n    isPublished: {\n      type: 'boolean',\n      default: false\n    },\n    author: {\n      type: 'string',\n      required: true,\n    },\n    tags: {\n      type:'list',\n      of: {type: 'string'}\n    }\n  },\n  computedFields:{\n    url:{\n      type:'string',\n      resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`\n    },\n    readingTime:{\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw)\n    },\n    toc:{\n      type: \"json\",\n      resolve: async doc => {\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const slugger  = new GithubSlugger()\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(({groups}) =>{\n          const flag = groups?.flag\n          const content = groups?.content\n\n          return{\n            level: flag?.length ==1 ? 'one': flag?.length ==2 ? 'two':'three',\n            text: content,\n            slug: content ? slugger.slug(content): undefined\n          }\n        })\n\n        return headings\n      }\n    }\n  },\n  \n}))\n\nconst codeOptions = {\n  theme:'github-dark'\n}\nexport default makeSource({\n  /* options */\n  contentDirPath: 'content',\n  documentTypes: [Blog],\n  mdx:{ remarkPlugins:[remarkGfm], rehypePlugins:[rehypeSlug, [rehypeAutolinkHeadings, {behavior:\"append\"}]\n,[rehypePrettyCode, codeOptions]]}\n\n  \n})"],
  "mappings": ";AAAA,SAAS,YAAY,0BAA0B;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACC,aAAa;AAAA,MACZ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACC,WAAW;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAY;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAK;AAAA,MACL,IAAI,EAAC,MAAM,SAAQ;AAAA,IACrB;AAAA,EACF;AAAA,EACA,gBAAe;AAAA,IACb,KAAI;AAAA,MACF,MAAK;AAAA,MACL,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACpD;AAAA,IACA,aAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC5C;AAAA,IACA,KAAI;AAAA,MACF,MAAM;AAAA,MACN,SAAS,OAAM,QAAO;AACpB,cAAM,YAAY;AAClB,cAAM,UAAW,IAAI,cAAc;AACnC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,SAAS,CAAC,EAAE,IAAI,CAAC,EAAC,OAAM,MAAK;AAC7E,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AAExB,iBAAM;AAAA,YACJ,OAAO,MAAM,UAAS,IAAI,QAAO,MAAM,UAAS,IAAI,QAAM;AAAA,YAC1D,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAG;AAAA,UACzC;AAAA,QACF,CAAC;AAED,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAEF,EAAE;AAEF,IAAM,cAAc;AAAA,EAClB,OAAM;AACR;AACA,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAExB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAI,EAAE,eAAc,CAAC,SAAS,GAAG,eAAc;AAAA,IAAC;AAAA,IAAY,CAAC,wBAAwB,EAAC,UAAS,SAAQ,CAAC;AAAA,IACzG,CAAC,kBAAkB,WAAW;AAAA,EAAC,EAAC;AAGjC,CAAC;",
  "names": []
}
